# This file is part of pydidas.
#
# Copyright 2024, Helmholtz-Zentrum Hereon
# SPDX-License-Identifier: CC-BY-4.0
#
# This workflow will check the formatting of the newly pushed commits
# to verify that all files are corretly formatted.

name: Building gh-pages including docs for old versions.

on:
  push:
    - "release_branch_for_documentation"
  tags:
    - "v*"

jobs:
  create_docs:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    - name: Identify trigger branch or tag
      run: |
        if [[ ${{ github.ref }} == refs/tags/* ]]; then
          echo "Triggered by a tag: ${GITHUB_REF#refs/tags/}"
        elif [[ ${{ github.ref }} == refs/heads/* ]]; then
          echo "Triggered by a branch: ${GITHUB_REF#refs/heads/}"
        else
          echo "Triggered by another ref: ${GITHUB_REF}"
        fi
      env:
        GITHUB_REF: ${{ github.ref }}
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        python -m pip install -r requirements.txt
#    - name: Extract version
#      id: extract_version
#      run: |
#        export QT_QPA_PLATFORM=offscreen
#        if [[ ${{ github.ref }} == refs/tags/* ]]; then
#          # need the first 'dummy' echo to set up pydidas
#          echo $(python -c "import pydidas" --no-sphinx)
#          {
#            echo $(python -c "from pydidas import VERSION; print(f'VERSION={VERSION}')" --no-sphinx)
#          } >> $GITHUB_OUTPUT
#        elif [[ ${{ github.ref }} == refs/heads/* ]]; then
#          echo "VERSION=dev}"
#        else
#          exit 1
#        fi
#    - name: Sphinx build
#      run: |
#        export QT_QPA_PLATFORM=offscreen
#        sphinx-build pydidas/docs/src versions/${{ steps.extract_version.outputs.VERSION }}
#    - name: Create temporary branch for gh-pages-output
#      run: |
#        git checkout -b temp-gh-pages
#        git add versions/${{ steps.extract_version.outputs.VERSION }}
#        git commit -m "Add gh-pages for version ${{ steps.extract_version.outputs.VERSION }}"
##        git push origin temp-gh-pages
#    - name: Merge latest version into gh-pages-versions-snapshot
#      run: |
#        git pull origin gh-pages-version-snapshots
#        git checkout gh-pages-version-snapshots
#        git checkout temp-gh-pages -- versions/${{ steps.extract_version.outputs.VERSION }}
#        git add versions/${{ steps.extract_version.outputs.VERSION }}
#        git commit -m "Add gh-pages for version ${{ steps.extract_version.outputs.VERSION }}"
#        git push origin gh-pages-version-snapshots
#    - name: Remove temporary branch
#        run: |
#            git branch -D temp-gh-pages
#    - name: Copy full docs into _site folder
#      run: |
#
#        cp -r versions/${{ steps.extract_version.outputs.VERSION }} _site
#
#    - name: Set permissions
#      run: |
#        chmod -c -R +rX "versions/" | while read line; do
#          echo "::warning title=Invalid file permissions automatically fixed::$line"
#        done
#    - name: Upload Pages artifact
#      uses: actions/upload-pages-artifact@v2
#      with:
#        path: versions
#
#  deploy_docs:
#    needs: create_docs
#
#    permissions:
#      pages: write
#      id-token: write
#
#    environment:
#      name: github-pages
#      url: _site
#
#    runs-on: ubuntu-latest
#    steps:
#    - name: Deploy to Github Pages
#      id: deployment
#      uses: actions/deploy-pages@v3