# This file is part of pydidas.
#
# Copyright 2024, Helmholtz-Zentrum Hereon
# SPDX-License-Identifier: CC-BY-4.0
#
# This workflow will create a new version tag from the main branch
# when the main branch has a new version number.

name: Release new version

on:
  push:
    branches:
      - "main"

jobs:
  check_if_new_version:
    runs-on: ubuntu-latest
    outputs:
        is_new_version: ${{ steps.check_tag.outputs.is_new_version }}
        version_number: ${{ steps.store_version_number.outputs.version_number }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.ref }}
    - name: Extract version
      id: extract_version
      run: |
        echo "CODE_VERSION=$(grep "__version__ = " "src/pydidas/version.py" | awk -F'=' '{print $2}' | tr -d '[:space:]"')" >> $GITHUB_ENV
        mkdir results
    - name: Check if tag exists
      id: check_tag
      run: |
        echo "Current code version: ${{ env.CODE_VERSION }}"
        if git rev-parse "refs/tags/v${{ env.CODE_VERSION }}" >/dev/null 2>&1; then
          echo "This version already exists as a tag."
          echo "is_new_version=false" >> $GITHUB_OUTPUT
        else
          echo "This version tag is new."
          echo "is_new_version=true" >> $GITHUB_OUTPUT
        fi
    - name: Store new code version
      id: store_version_number
      run: |
        echo "version_number=${{ env.CODE_VERSION}}" >> $GITHUB_OUTPUT
    - name: Verify stored information
      run: |
        echo "is_new_version: ${{ steps.check_tag.outputs.is_new_version }}"
        echo "version_number: ${{ steps.store_version_number.outputs.version_number }}"
        if [ "${{ env.CODE_VERSION }}" == 'v']; then
          echo "The code version could not be extracted."
          exit 1
        fi

  create_tag_on_new_release_version:
    runs-on: ubuntu-latest
    needs: check_if_new_version
    if: needs.check_if_new_version.outputs.is_new_version == 'true'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.ref }}
    - name: Configure local git
      run: |
        echo "COMMIT_EMAIL=$(git log -1 --pretty=format:'%ae')" >> $GITHUB_ENV
        git config --global user.name "${GITHUB_ACTOR}"
        git config --global user.email "${{env.COMMIT_EMAIL}}"
    - name: Create and push new tag
      run: |
        git tag -a "v${{ needs.check_if_new_version.outputs.version_number }}" \
          -m "Release version v${{ needs.check_if_new_version.outputs.version_number }}"
        git push origin "v${{ needs.check_if_new_version.outputs.version_number }}"

  create_release_from_tag:
    runs-on: ubuntu-latest
    needs:
      - check_if_new_version
      - create_tag_on_new_release_version
    if: needs.check_if_new_version.outputs.is_new_version == 'true'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.ref }}
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        tag: "v${{ needs.check_if_new_version.outputs.version_number }}"
      id: create_release
      run: |
        echo "Creating release for tag ${{ env.tag }}"
        echo "Version: v${{ needs.check_if_new_version.outputs.version_number }}"
        gh release create "$tag" \
          --repo="$GITHUB_REPOSITORY" \
          --title="Version ${tag#v}" \
          --notes "Please find the release notes in the CHANGELOG.md file." 

  add_python_wheel_to_release:
    runs-on: ubuntu-latest
    needs:
      - check_if_new_version
      - create_release_from_tag
    if: needs.check_if_new_version.outputs.is_new_version == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel build
      - name: Build package
        run: |
          python -m build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distribution
          path: dist/
      - name: Add wheel to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag="v${{ needs.check_if_new_version.outputs.version_number }}"
          gh release upload "$tag" dist/*

  publish_to_pypi_test:
    runs-on: ubuntu-latest
    needs:
      - check_if_new_version
      - add_python_wheel_to_release
    if: needs.check_if_new_version.outputs.is_new_version == 'true'
    environment:
      name: testpypi
      url: https:/test.pypi.org/p/pydidas
    permissions:
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: python-package-distribution
          path: dist/
      - name: Publish package distributions to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/