
.. |parameters| replace:: :py:class:`Parameters <pydidas.core.Parameter>`
.. |param_collection| replace:: :py:class:`ParameterCollection <pydidas.core.ParameterCollection>`

.. _generic_params:

Generic Parameters
==================

This page gives a full list of all available generic |parameters| as a reference.

Introduction
------------

For accessing generic |parameters|, use 
:py:func:`~pydidas.core.get_generic_parameter` to access individual |parameters| 
and :py:func:`~pydidas.core.get_generic_param_collection` to create a new
|param_collection| from generic |parameters|.

Examples are given below:

.. code-block:: python

    >>> from pydidas.core import get_generic_parameter
    >>> from pydidas.core import get_generic_param_collection
    >>> filename_param = get_generic_parameter('filename')
    >>> filename_param
    Parameter <filename: . (type: Path, default: .)>
    >>> generic_params = get_generic_param_collection('filename', 'n_files')
    >>> generic_params
    {'filename': Parameter <filename: . (type: Path, default: .)>,
    'n_files': Parameter <n_files: 0 (type: Integral, default: 0)>}

List of generic Parameters
--------------------------

Generic |parameters| are sorted by their *use case*. The following sections are 
available: 

.. contents::
   :local:


Fit
~~~

.. list-table::
   :widths: 20 80
   :header-rows: 1
   :class: tight-table

   * - Parameter
     - Description
   * - :py:data:`fit_sigma_threshold`
     - | **type** : float
       | **default** : 0.25
       | **name** : Fit σ rejection threshold
       | **choices** : None
       | **allow_None** : False
       | **unit** : 
       | **tooltip** : The threshold to select which fitting points to reject, based on the normalized standard deviation. Any fit which has a normalized std which is worse than the threshold will be rejected as failed.
   * - :py:data:`fit_min_peak_height`
     - | **type** : float
       | **default** : None
       | **name** : Minimum peak height to fit
       | **choices** : None
       | **allow_None** : True
       | **unit** : 
       | **tooltip** : The minimum height a peak must have to attempt a fit. A value of 'None' will not impose any limits on the peak height.
   * - :py:data:`fit_func`
     - | **type** : str
       | **default** : Gaussian
       | **name** : Fit function
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : Select the type of fit function to be used in the single peak fit.
   * - :py:data:`fit_bg_order`
     - | **type** : int
       | **default** : 0
       | **name** : Fit background order
       | **choices** : [None, 0, 1]
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The order of the background. None corresponds to no background.
   * - :py:data:`fit_upper_limit`
     - | **type** : float
       | **default** : None
       | **name** : Peak fit upper limit
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The upper limit (in the x-axis´ unit) to the fit region. None corresponds to using no upper limit but the data limits.
   * - :py:data:`fit_lower_limit`
     - | **type** : float
       | **default** : None
       | **name** : Peak fit lower limit
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The lower limit (in the x-axis´ unit) to the fit region. None corresponds to using no upper limit but the data limits.
   * - :py:data:`fit_output`
     - | **type** : str
       | **default** : position; area; FWHM
       | **name** : Output
       | **choices** : ['no output', 'position', 'amplitude', 'area', 'FWHM', 'background at peak', 'total count intensity', 'position; amplitude', 'position; area', 'position; FWHM', 'position; background at peak', 'position; total count intensity', 'amplitude; area', 'amplitude; FWHM', 'amplitude; background at peak', 'amplitude; total count intensity', 'area; FWHM', 'area; background at peak', 'area; total count intensity', 'FWHM; background at peak', 'FWHM; total count intensity', 'background at peak; total count intensity', 'position; amplitude; area', 'position; amplitude; FWHM', 'position; amplitude; background at peak', 'position; amplitude; total count intensity', 'position; area; FWHM', 'position; area; background at peak', 'position; area; total count intensity', 'position; FWHM; background at peak', 'position; FWHM; total count intensity', 'position; background at peak; total count intensity', 'amplitude; area; FWHM', 'amplitude; area; background at peak', 'amplitude; area; total count intensity', 'amplitude; FWHM; background at peak', 'amplitude; FWHM; total count intensity', 'amplitude; background at peak; total count intensity', 'area; FWHM; background at peak', 'area; FWHM; total count intensity', 'area; background at peak; total count intensity', 'FWHM; background at peak; total count intensity', 'position; amplitude; area; FWHM', 'position; amplitude; area; background at peak', 'position; amplitude; area; total count intensity', 'position; amplitude; FWHM; background at peak', 'position; amplitude; FWHM; total count intensity', 'position; amplitude; background at peak; total count intensity', 'position; area; FWHM; background at peak', 'position; area; FWHM; total count intensity', 'position; area; background at peak; total count intensity', 'position; FWHM; background at peak; total count intensity', 'amplitude; area; FWHM; background at peak', 'amplitude; area; FWHM; total count intensity', 'amplitude; area; background at peak; total count intensity', 'amplitude; FWHM; background at peak; total count intensity', 'area; FWHM; background at peak; total count intensity', 'position; amplitude; area; FWHM; background at peak', 'position; amplitude; area; FWHM; total count intensity', 'position; amplitude; area; background at peak; total count intensity', 'position; amplitude; FWHM; background at peak; total count intensity', 'position; area; FWHM; background at peak; total count intensity', 'amplitude; area; FWHM; background at peak; total count intensity', 'position; amplitude; area; FWHM; background at peak; total count intensity']
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The output of the fitting plugin. The plugin can either return the peak area, the peak position or the FWHM. Alternatively, any combination of these values can be retured as well. Note that the fit parameters are always stored in the metadata.
   * - :py:data:`fit_peak_xlow`
     - | **type** : float
       | **default** : None
       | **name** : Peak low x boundary
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The lower boundary in x for the center position of the  peak to be fitted.
   * - :py:data:`fit_peak0_xlow`
     - | **type** : float
       | **default** : None
       | **name** : Peak #0 low x boundary
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The lower boundary in x for the center position of the 0th peak to be fitted.
   * - :py:data:`fit_peak1_xlow`
     - | **type** : float
       | **default** : None
       | **name** : Peak #1 low x boundary
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The lower boundary in x for the center position of the 1st peak to be fitted.
   * - :py:data:`fit_peak2_xlow`
     - | **type** : float
       | **default** : None
       | **name** : Peak #2 low x boundary
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The lower boundary in x for the center position of the 2nd peak to be fitted.
   * - :py:data:`fit_peak3_xlow`
     - | **type** : float
       | **default** : None
       | **name** : Peak #3 low x boundary
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The lower boundary in x for the center position of the 3rd peak to be fitted.
   * - :py:data:`fit_peak_xhigh`
     - | **type** : float
       | **default** : None
       | **name** : Peak high x boundary
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The upper boundary in x for the center position of the  peak to be fitted.
   * - :py:data:`fit_peak0_xhigh`
     - | **type** : float
       | **default** : None
       | **name** : Peak #0 high x boundary
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The upper boundary in x for the center position of the 0th peak to be fitted.
   * - :py:data:`fit_peak1_xhigh`
     - | **type** : float
       | **default** : None
       | **name** : Peak #1 high x boundary
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The upper boundary in x for the center position of the 1st peak to be fitted.
   * - :py:data:`fit_peak2_xhigh`
     - | **type** : float
       | **default** : None
       | **name** : Peak #2 high x boundary
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The upper boundary in x for the center position of the 2nd peak to be fitted.
   * - :py:data:`fit_peak3_xhigh`
     - | **type** : float
       | **default** : None
       | **name** : Peak #3 high x boundary
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The upper boundary in x for the center position of the 3rd peak to be fitted.
   * - :py:data:`fit_peak_xstart`
     - | **type** : float
       | **default** : None
       | **name** : Peak fit x0 start guess
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The starting guess for the parameter value for the peak center position in x. Note: This is only the starting value for the fit, not a fixed value.
   * - :py:data:`fit_peak0_xstart`
     - | **type** : float
       | **default** : None
       | **name** : Peak #0 fit x0 start guess
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The starting guess for the parameter value for the peak center position in x. Note: This is only the starting value for the fit, not a fixed value.
   * - :py:data:`fit_peak1_xstart`
     - | **type** : float
       | **default** : None
       | **name** : Peak #1 fit x0 start guess
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The starting guess for the parameter value for the peak center position in x. Note: This is only the starting value for the fit, not a fixed value.
   * - :py:data:`fit_peak2_xstart`
     - | **type** : float
       | **default** : None
       | **name** : Peak #2 fit x0 start guess
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The starting guess for the parameter value for the peak center position in x. Note: This is only the starting value for the fit, not a fixed value.
   * - :py:data:`fit_peak3_xstart`
     - | **type** : float
       | **default** : None
       | **name** : Peak #3 fit x0 start guess
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The starting guess for the parameter value for the peak center position in x. Note: This is only the starting value for the fit, not a fixed value.
   * - :py:data:`fit_peak_width`
     - | **type** : float
       | **default** : None
       | **name** : Peak fit σ or Γ start guess
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The starting guess for the parameter value for the fit sigma/gamma peak width. Note: This is only the starting value for the fit, not a fixed value.
   * - :py:data:`fit_peak0_width`
     - | **type** : float
       | **default** : None
       | **name** : Peak #0 fit σ or Γ start guess
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The starting guess for the parameter value for the fit sigma/gamma peak width. Note: This is only the starting value for the fit, not a fixed value.
   * - :py:data:`fit_peak1_width`
     - | **type** : float
       | **default** : None
       | **name** : Peak #1 fit σ or Γ start guess
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The starting guess for the parameter value for the fit sigma/gamma peak width. Note: This is only the starting value for the fit, not a fixed value.
   * - :py:data:`fit_peak2_width`
     - | **type** : float
       | **default** : None
       | **name** : Peak #2 fit σ or Γ start guess
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The starting guess for the parameter value for the fit sigma/gamma peak width. Note: This is only the starting value for the fit, not a fixed value.
   * - :py:data:`fit_peak3_width`
     - | **type** : float
       | **default** : None
       | **name** : Peak #3 fit σ or Γ start guess
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The starting guess for the parameter value for the fit sigma/gamma peak width. Note: This is only the starting value for the fit, not a fixed value.

Other
~~~~~

.. list-table::
   :widths: 20 80
   :header-rows: 1
   :class: tight-table

   * - Parameter
     - Description
   * - :py:data:`live_processing`
     - | **type** : int
       | **default** : 0
       | **name** : Live processing
       | **choices** : [True, False]
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : Set live processing to True if the files do not yet exist at process startup. This will skip checks on file existence and size.
   * - :py:data:`label`
     - | **type** : str
       | **default** : 
       | **name** : Node label
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : A label for identifying the Plugin node in the results. Internally, all Plugins are identified by their node IDs, this additional label is merely a handle for easier human identification.
   * - :py:data:`keep_results`
     - | **type** : bool
       | **default** : False
       | **name** : Always store results
       | **choices** : [True, False]
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : Flag to force pydidas to keep the results of this plugin available even if it is intermediary data and would normally not be stored.
   * - :py:data:`hdf5_dataset_shape`
     - | **type** : tuple
       | **default** : (0, 0, 0)
       | **name** : Hdf5 dataset shape
       | **choices** : None
       | **allow_None** : False
       | **tooltip** : The shape of the hdf5 dataset. This corresponds to (number of images, image size y, image size x).
   * - :py:data:`use_bg_file`
     - | **type** : int
       | **default** : 0
       | **name** : Subtract background image
       | **choices** : [True, False]
       | **allow_None** : False
       | **tooltip** : Keyword to toggle usage of background subtraction.
   * - :py:data:`n_image`
     - | **type** : int
       | **default** : 0
       | **name** : Total number of images
       | **choices** : None
       | **unit** : 
       | **tooltip** : The total number of images in the composite images.
   * - :py:data:`n_files`
     - | **type** : int
       | **default** : 0
       | **name** : Total number of files
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The total number of selected files.
   * - :py:data:`composite_nx`
     - | **type** : int
       | **default** : 1
       | **name** : Number of images in x
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The number of original images combined in the composite image in x direction. A value of -1 will determine the number of images in x direction automatically based on the number of images in y direction.
   * - :py:data:`composite_ny`
     - | **type** : int
       | **default** : -1
       | **name** : Number of images in y
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The number of original images combined in the composite image in y direction. A value of -1 will determine the number of images in y direction automatically based on the number of images in x direction.
   * - :py:data:`composite_dir`
     - | **type** : str
       | **default** : x
       | **name** : Preferred composite direction
       | **choices** : ['x', 'y']
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The 'fast' direction of the composite image. This dimension will be filled first before going to the next row/column.
   * - :py:data:`composite_image_op`
     - | **type** : str
       | **default** : None
       | **name** : Raw image operation
       | **choices** : [None, 'Flip left/right', 'Flip up/down', 'Rot 180deg', 'Rot 90deg clockwise', 'Rot 90deg counter-clockwise']
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The image operation applied to each raw image prior to merging it in the composite image. This allows to adjust the image orientation with respect to the scan.
   * - :py:data:`composite_xdir_orientation`
     - | **type** : str
       | **default** : left-to-right
       | **name** : X orientation direction
       | **choices** : ['left-to-right', 'right-to-left']
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The direction of how images are inserted into the composite in x direction. Left-to-right starts with low indices (python standard) whereas right-to-left will insert image at the max index position first.
   * - :py:data:`composite_ydir_orientation`
     - | **type** : str
       | **default** : top-to-bottom
       | **name** : Y orientation direction
       | **choices** : ['top-to-bottom', 'bottom-to-top']
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The direction of how images are inserted into the composite in y direction. Top-to-bottom starts with low indices (python standard) whereas bottom-to-top will insert image at the max index position first. Note that the display may be flipped with the origin at the bottom.
   * - :py:data:`first_index`
     - | **type** : int
       | **default** : 0
       | **name** : First index
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The first index to be used for the file series.
   * - :py:data:`last_index`
     - | **type** : int
       | **default** : 0
       | **name** : Last index
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The last index to be used for the file series.
   * - :py:data:`frame_index`
     - | **type** : int
       | **default** : 0
       | **name** : Global frame index
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The global index of the frame to be processed. Note: The first frame number is always 0, irrespective of any offsets in the filenames.
   * - :py:data:`detector_image_index`
     - | **type** : int
       | **default** : 0
       | **name** : Detector image number
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The detector image number, as files are written to disk.
   * - :py:data:`upper_limit`
     - | **type** : float
       | **default** : None
       | **name** : Upper limit
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The upper limit of data selection. This point is included in the data. Note that the selection is either in indices or data range, depending on the value of 'type_selection'. A limit of 'None' will set no upper limit.
   * - :py:data:`lower_limit`
     - | **type** : float
       | **default** : None
       | **name** : Lower limit
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The lower limit of data selection. This point is included in the data. Note that the selection is either in indices or data range, depending on the value of 'type_selection'. A limit of 'None' will set no lower limit.
   * - :py:data:`upper_limit_ax0`
     - | **type** : float
       | **default** : None
       | **name** : Upper limit axis 0 (y)
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The upper limit of data selection. This point is included in the data. Note that the selection is either in indices or data range, depending on the value of 'type_selection'. A limit of 'None' will set no upper limit.
   * - :py:data:`lower_limit_ax0`
     - | **type** : float
       | **default** : None
       | **name** : Lower limit axis 0 (y)
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The lower limit of data selection. This point is included in the data. Note that the selection is either in indices or data range, depending on the value of 'type_selection'. A limit of 'None' will set no lower limit.
   * - :py:data:`upper_limit_ax1`
     - | **type** : float
       | **default** : None
       | **name** : Upper limit axis 1 (x)
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The upper limit of data selection. This point is included in the data. Note that the selection is either in indices or data range, depending on the value of 'type_selection'. A limit of 'None' will set no upper limit.
   * - :py:data:`lower_limit_ax1`
     - | **type** : float
       | **default** : None
       | **name** : Lower limit axis 1 (x)
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The lower limit of data selection. This point is included in the data. Note that the selection is either in indices or data range, depending on the value of 'type_selection'. A limit of 'None' will set no lower limit.
   * - :py:data:`autosave_results`
     - | **type** : int
       | **default** : 0
       | **name** : Autosave results
       | **choices** : [True, False]
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : Save the results automatically after finishing processing. The results for each plugin will be saved in a separate file (or files if multiple formats have been selected).
   * - :py:data:`autosave_directory`
     - | **type** : Path
       | **default** : 
       | **name** : Autosave directory
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The directory for autosave files.
   * - :py:data:`autosave_format`
     - | **type** : str
       | **default** : HDF5
       | **name** : Autosave formats
       | **choices** : [None, 'HDF5']
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The file format(s) for the data to be saved after the workflow has been executed. All data will be saved in a single folder for each run with one file for each plugin.
   * - :py:data:`output_fname`
     - | **type** : Path
       | **default** : 
       | **name** : Output filename
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The output filename for the data export.
   * - :py:data:`selected_results`
     - | **type** : str
       | **default** : No selection
       | **name** : Select node result to display
       | **choices** : ['No selection']
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The selected node of the WorkflowTree to display the corresponding results.
   * - :py:data:`saving_format`
     - | **type** : str
       | **default** : HDF5
       | **name** : Save to format
       | **choices** : [None, 'HDF5']
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The file format(s) for saving the data. All data will be saved in a single folder for each run.
   * - :py:data:`enable_overwrite`
     - | **type** : int
       | **default** : False
       | **name** : Enable overwriting
       | **choices** : [False, True]
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : Allow overwriting of existing files and writing in existing folders. If this Parameter is True, no further confirmation will be asked and no further warning will be displayed.
   * - :py:data:`use_scan_timeline`
     - | **type** : int
       | **default** : False
       | **name** : Use scan timeline
       | **choices** : [True, False]
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : Keyword to toggle using a scan timeline with only one dimension instead of all scan dimensions.
   * - :py:data:`use_data_range`
     - | **type** : int
       | **default** : True
       | **name** : Use data range
       | **choices** : [True, False]
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : Keyword to toggle using a the data range instead of the indices for selecting data.
   * - :py:data:`scan_for_all`
     - | **type** : int
       | **default** : False
       | **name** : Scan for all new files
       | **choices** : [False, True]
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : Scan for all new files and not only files matching the input pattern.
   * - :py:data:`result_n_dim`
     - | **type** : int
       | **default** : -1
       | **name** : Result dimensionality
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The total number of dimensions in the result dataset.
   * - :py:data:`active_node`
     - | **type** : int
       | **default** : 0
       | **name** : The active node
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The node ID of the currently selected node.
   * - :py:data:`type_selection`
     - | **type** : str
       | **default** : Data values
       | **name** : Data selection
       | **choices** : ['Data values', 'Indices']
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : Select between using the axis values (in the respective.unit) and the axis indices.
   * - :py:data:`plot_ax1`
     - | **type** : int
       | **default** : 0
       | **name** : Data axis no. 1 for plot
       | **choices** : [0]
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The axis which is to be used as the first axis in the plot of the results.
   * - :py:data:`plot_ax2`
     - | **type** : int
       | **default** : 1
       | **name** : Data axis no. 2 for plot
       | **choices** : [0, 1]
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The axis which is to be used as the second axis in the plot of the results.
   * - :py:data:`overlay_color`
     - | **type** : str
       | **default** : orange
       | **name** : Plot overlay color
       | **choices** : ['orange', 'blue', 'red', 'green', 'purple', 'cyan', 'gray', 'black', 'white']
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : Set the display color for the overlay items (markers and shapes) in the plot.
   * - :py:data:`mask_threshold_low`
     - | **type** : float
       | **default** : None
       | **name** : Lower mask threshold
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The lower threshold for the mask. If any finite value (i.e. not np.nan or None) is used, the value of any pixels with a value below the threshold will be masked. A value of np.nan or None will ignore the threshold.
   * - :py:data:`mask_threshold_high`
     - | **type** : float
       | **default** : None
       | **name** : Upper mask threshold
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The upper threshold for the mask. If any finite value (i.e. not np.nan or None) is used, the value of any pixels with a value above the threshold will be masked. A value of np.nan or None will ignore the threshold.
   * - :py:data:`mask_grow`
     - | **type** : int
       | **default** : 0
       | **name** : Grow/shrink masked regions
       | **choices** : None
       | **unit** : px
       | **allow_None** : False
       | **tooltip** : The masked region can be grown (morphological dilation) or shrunk (morphological erosion), based on the input value. A value >0 will grow the masked region by the specified amounts in pixels, a value less than zero will erode the masked regions by the specified amount.
   * - :py:data:`kernel_iterations`
     - | **type** : int
       | **default** : 1
       | **name** : Grow/shrink iterations
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The number of iterations to apply the erosion/dilation operation on the masked region.
   * - :py:data:`process_data_dim`
     - | **type** : int
       | **default** : -1
       | **name** : Process data dimension
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : This parameter determines which data dimension should be processed if the input data dimensionality is larger than the processing dimensionality. The default of -1 will always use the last data dimension.
   * - :py:data:`_process_data_dim`
     - | **type** : int
       | **default** : -1
       | **name** : Process data dimension
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : This internal parameter can store the modulated data dimension to be processed.
   * - :py:data:`process_data_dims`
     - | **type** : tuple
       | **default** : (0, 1)
       | **name** : Process data dimensions
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **subtype** : <class 'int'>
       | **tooltip** : This parameter determines which data dimensions should be processed if the input data dimensionality is larger than the processing dimensionality. The default of None will default to the full data dimensions and raise an error if the input data has more dimensions than expected for processing.
   * - :py:data:`_process_data_dims`
     - | **type** : tuple
       | **default** : None
       | **name** : Process data dimensions
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **subtype** : <class 'int'>
       | **tooltip** : This internal Parameter can store the modulated data dimensions to be processed.
   * - :py:data:`auto_check_for_updates`
     - | **type** : int
       | **default** : True
       | **name** : Check for updates
       | **choices** : [False, True]
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : This parameter allows the user to activate/deactivate the automatic checking for updates at startup.

Data import
~~~~~~~~~~~

.. list-table::
   :widths: 20 80
   :header-rows: 1
   :class: tight-table

   * - Parameter
     - Description
   * - :py:data:`filename`
     - | **type** : Path
       | **default** : 
       | **name** : Filename
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The file name of the input file.
   * - :py:data:`current_filename`
     - | **type** : str
       | **default** : 
       | **name** : Current input filename
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The filename of the currently active file.
   * - :py:data:`filename_pattern`
     - | **type** : Path
       | **default** : 
       | **name** : The filename pattern
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The pattern of the filename. Use hashes '#' for wildcards which will be filled in with numbers. This Parameter must be set if scan_for_all is False.
   * - :py:data:`first_file`
     - | **type** : Path
       | **default** : 
       | **name** : First file name
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The name of the first file for a file series or of the hdf5 file in case of hdf5 file input.
   * - :py:data:`last_file`
     - | **type** : Path
       | **default** : 
       | **name** : Last file name
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : Used only for file series: The name of the last file to be used for this app or tool.
   * - :py:data:`file_stepping`
     - | **type** : int
       | **default** : 1
       | **name** : File stepping
       | **choices** : None
       | **allow_None** : False
       | **tooltip** : The step width (in files), A value n > 1 will only process every n-th file.
   * - :py:data:`hdf5_key`
     - | **type** : Hdf5key
       | **default** : /entry/data/data
       | **name** : Hdf5 dataset key
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : Used only for hdf5 files: The dataset key.
   * - :py:data:`hdf5_frame`
     - | **type** : int
       | **default** : 0
       | **name** : Frame number
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : For hdf5 image files: The frame number in the dataset
   * - :py:data:`hdf5_first_image_num`
     - | **type** : int
       | **default** : 0
       | **name** : First image number
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The first image in the hdf5-dataset to be used.
   * - :py:data:`hdf5_last_image_num`
     - | **type** : int
       | **default** : -1
       | **name** : Last image number
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The last image in the hdf5-dataset to be used. The value -1 will default to the last image.
   * - :py:data:`hdf5_stepping`
     - | **type** : int
       | **default** : 1
       | **name** : Hdf5 dataset stepping
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The step width (in frames). A value n > 1 will only process every n-th frame.
   * - :py:data:`hdf5_slicing_axis`
     - | **type** : int
       | **default** : 0
       | **name** : Hdf5 frame slicing axes
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The slicing axes to identify the frame by its number in the full dataset. For example, if the frame has the axes (frame index, x, y), the slicing axes would be 0. To use the full dataset, set the slicing axis to `None`. A `None` setting will also ignore the hdf5 frame number Parameter.
   * - :py:data:`bg_file`
     - | **type** : Path
       | **default** : 
       | **name** : Background image file
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The name of the file used for background correction.
   * - :py:data:`bg_hdf5_key`
     - | **type** : Hdf5key
       | **default** : /entry/data/data
       | **name** : Background image Hdf5 dataset key
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : For hdf5 background image files: The dataset key.
   * - :py:data:`bg_hdf5_frame`
     - | **type** : int
       | **default** : 0
       | **name** : Background image number
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : For hdf5 background image files: The image number in the dataset
   * - :py:data:`images_per_file`
     - | **type** : int
       | **default** : -1
       | **name** : Images per file
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The number of images in the file. For hdf5 files, this corresponds to the number of frames in the hdf5 dataset. A value -1 auto-discovers the number of images per file.
   * - :py:data:`_counted_images_per_file`
     - | **type** : int
       | **default** : 1
       | **name** : Processed images per file
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The number of images per file pydidas counted from the first file.
   * - :py:data:`directory_path`
     - | **type** : Path
       | **default** : 
       | **name** : Directory path
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The absolute path of the directory to be used.
   * - :py:data:`eiger_filename_suffix`
     - | **type** : str
       | **default** : _data_000001.h5
       | **name** : Eiger filename suffix
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The suffix to be appended to the filename pattern to get the full filename for the data file.
   * - :py:data:`eiger_dir`
     - | **type** : str
       | **default** : eiger9m
       | **name** : Eiger directory key
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The name of the sub-directory for each scan in which the Eiger detector writes its data files.
   * - :py:data:`raw_datatype`
     - | **type** : str
       | **default** : float 64 bit
       | **name** : Datatype
       | **choices** : ['boolean (1 bit integer)', 'float 16 bit', 'float 32 bit', 'float 64 bit', 'float 128 bit', 'int 8 bit', 'int 16 bit', 'int 32 bit', 'int 64 bit', ' unsigned int 8 bit', ' unsigned int 16 bit', ' unsigned int 32 bit', ' unsigned int 64 bit']
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The data type to be used for decoding. Note that numpy data types are used for decoding with native byteorder.
   * - :py:data:`raw_shape_x`
     - | **type** : int
       | **default** : 0
       | **name** : Raw shape x
       | **choices** : None
       | **unit** : px
       | **allow_None** : False
       | **tooltip** : The x shape of the raw data file. Following the python convention,the first axis is y and the second axis is x.
   * - :py:data:`raw_shape_y`
     - | **type** : int
       | **default** : 0
       | **name** : Raw shape y
       | **choices** : None
       | **unit** : px
       | **allow_None** : False
       | **tooltip** : The y shape of the raw data file. Following the python convention,the first axis is y and the second axis is x.
   * - :py:data:`raw_header`
     - | **type** : int
       | **default** : 0
       | **name** : Raw file header length
       | **choices** : None
       | **unit** : bytes
       | **allow_None** : False
       | **tooltip** : The length of the file header in bytes. The header will not be decoded as image data.
   * - :py:data:`num_frames_to_use`
     - | **type** : int
       | **default** : 2
       | **name** : Number of frame to use
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The number of frames to be loaded and included in the stack. Frames are loaded starting with the first frame index and thus allow a rolling average over the frames.

Scan
~~~~

.. list-table::
   :widths: 20 80
   :header-rows: 1
   :class: tight-table

   * - Parameter
     - Description
   * - :py:data:`scan_dim`
     - | **type** : int
       | **default** : 1
       | **name** : Scan dimensionsionality
       | **choices** : [1, 2, 3, 4]
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The scan dimensionality. This defines the number of processed dimensions.
   * - :py:data:`scan_title`
     - | **type** : str
       | **default** : 
       | **name** : Scan name/title
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The scan name or title. This is used exclusively for reference in result exporters.
   * - :py:data:`scan_base_directory`
     - | **type** : Path
       | **default** : 
       | **name** : Scan base directory path
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The absolute path of the base directory in which to find this scan. Note that indivual plugins may automatically discover and use subdirectories. Please refer to the specific InputPlugin in use for more information.
   * - :py:data:`scan_name_pattern`
     - | **type** : Path
       | **default** : 
       | **name** : The scan naming pattern
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The pattern used for naming scan (files). Use hashes '#' for wildcards which will be filled in with numbers for the various files. Note that individual plugins may use this Parameter for either directory or file names. Please refer to the specific InputPlugin in use for more information.
   * - :py:data:`scan_start_index`
     - | **type** : int
       | **default** : 0
       | **name** : First filename number
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The number of the first file to be used in processing. This number will be applied as offset in the scan naming pattern to identify the respective filename for scan points.
   * - :py:data:`scan_index_stepping`
     - | **type** : int
       | **default** : 1
       | **name** : Frame index stepping
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The stepping of the index in frames. A value of n corresponds to only using every n-th index. For example, an index stepping of 3 with an offset of 5 would process the frames 5, 8, 11, 14 etc. 
       | Please note that the index stepping refers to the frames, not the filenames. In the case of container files (e.g. hdf5), the index stepping will skip process every n-th frame, not every n-th file.
   * - :py:data:`scan_multi_image_handling`
     - | **type** : str
       | **default** : Average
       | **name** : Multi-image handling
       | **choices** : ['Average', 'Sum', 'Maximum']
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : Define the handling of images if multiple images were acquired per scan point. If all individual images should be kept, please set the scan multiplicity to 1 and add an additional dimension with the multiplicity to the scan.
   * - :py:data:`scan_multiplicity`
     - | **type** : int
       | **default** : 1
       | **name** : Image multiplicity
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The number of images acquired at *each* scan point. The default of '1' corresponds to one image per scan point. Please note that the value for the multiplicity will be multiplied with the number of scan points. If this setting is used for 'averaging' images, please reduce the number of scan points correspondingly.
   * - :py:data:`scan_dim0_label`
     - | **type** : str
       | **default** : 
       | **name** : Name of scan direction 0
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The axis name for scan direction 0. This information will only be used for labelling.
   * - :py:data:`scan_dim1_label`
     - | **type** : str
       | **default** : 
       | **name** : Name of scan direction 1
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The axis name for scan direction 1. This information will only be used for labelling.
   * - :py:data:`scan_dim2_label`
     - | **type** : str
       | **default** : 
       | **name** : Name of scan direction 2
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The axis name for scan direction 2. This information will only be used for labelling.
   * - :py:data:`scan_dim3_label`
     - | **type** : str
       | **default** : 
       | **name** : Name of scan direction 3
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The axis name for scan direction 3. This information will only be used for labelling.
   * - :py:data:`scan_dim0_n_points`
     - | **type** : int
       | **default** : 0
       | **name** : Number of scan points (dir. 0)
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The total number of scan points in scan direction 0. The number of points is one higher than the number of intervals.
   * - :py:data:`scan_dim1_n_points`
     - | **type** : int
       | **default** : 0
       | **name** : Number of scan points (dir. 1)
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The total number of scan points in scan direction 1. The number of points is one higher than the number of intervals.
   * - :py:data:`scan_dim2_n_points`
     - | **type** : int
       | **default** : 0
       | **name** : Number of scan points (dir. 2)
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The total number of scan points in scan direction 2. The number of points is one higher than the number of intervals.
   * - :py:data:`scan_dim3_n_points`
     - | **type** : int
       | **default** : 0
       | **name** : Number of scan points (dir. 3)
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The total number of scan points in scan direction 3. The number of points is one higher than the number of intervals.
   * - :py:data:`scan_dim0_delta`
     - | **type** : float
       | **default** : 1
       | **name** : Step width in direction 0
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The step width between scan points in direction 0.
   * - :py:data:`scan_dim1_delta`
     - | **type** : float
       | **default** : 1
       | **name** : Step width in direction 1
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The step width between scan points in direction 1.
   * - :py:data:`scan_dim2_delta`
     - | **type** : float
       | **default** : 1
       | **name** : Step width in direction 2
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The step width between scan points in direction 2.
   * - :py:data:`scan_dim3_delta`
     - | **type** : float
       | **default** : 1
       | **name** : Step width in direction 3
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The step width between scan points in direction 3.
   * - :py:data:`scan_dim0_offset`
     - | **type** : float
       | **default** : 0
       | **name** : Offset of direction 0
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The coordinate offset of the movement in scan direction 0 (i.e. the counter / motor position for scan step #0).
   * - :py:data:`scan_dim1_offset`
     - | **type** : float
       | **default** : 0
       | **name** : Offset of direction 1
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The coordinate offset of the movement in scan direction 1 (i.e. the counter / motor position for scan step #0).
   * - :py:data:`scan_dim2_offset`
     - | **type** : float
       | **default** : 0
       | **name** : Offset of direction 2
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The coordinate offset of the movement in scan direction 2 (i.e. the counter / motor position for scan step #0).
   * - :py:data:`scan_dim3_offset`
     - | **type** : float
       | **default** : 0
       | **name** : Offset of direction 3
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The coordinate offset of the movement in scan direction 3 (i.e. the counter / motor position for scan step #0).
   * - :py:data:`scan_dim0_unit`
     - | **type** : str
       | **default** : 
       | **name** : Unit of direction 0
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The unit of the positions in scan direction 0.
   * - :py:data:`scan_dim1_unit`
     - | **type** : str
       | **default** : 
       | **name** : Unit of direction 1
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The unit of the positions in scan direction 1.
   * - :py:data:`scan_dim2_unit`
     - | **type** : str
       | **default** : 
       | **name** : Unit of direction 2
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The unit of the positions in scan direction 2.
   * - :py:data:`scan_dim3_unit`
     - | **type** : str
       | **default** : 
       | **name** : Unit of direction 3
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The unit of the positions in scan direction 3.
   * - :py:data:`scan_index0`
     - | **type** : int
       | **default** : 0
       | **name** : Scan dim. 0 index
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The position index for the scan dimension 0.
   * - :py:data:`scan_index1`
     - | **type** : int
       | **default** : 0
       | **name** : Scan dim. 1 index
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The position index for the scan dimension 1.
   * - :py:data:`scan_index2`
     - | **type** : int
       | **default** : 0
       | **name** : Scan dim. 2 index
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The position index for the scan dimension 2.
   * - :py:data:`scan_index3`
     - | **type** : int
       | **default** : 0
       | **name** : Scan dim. 3 index
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The position index for the scan dimension 3.

Settings
~~~~~~~~

.. list-table::
   :widths: 20 80
   :header-rows: 1
   :class: tight-table

   * - Parameter
     - Description
   * - :py:data:`mp_n_workers`
     - | **type** : int
       | **default** : 4
       | **name** : Number of MP workers
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The number of multiprocessing workers. Note that this number should not be set too high for two reasons:
       | 1. File reading processes interfere with each other if too many are active at once.
       | 2. pyFAI already inherently uses parallelization and you can only gain limited performance increases for multiple parallel processes.
   * - :py:data:`data_buffer_size`
     - | **type** : float
       | **default** : 1500
       | **name** : Data buffer size
       | **choices** : None
       | **unit** : MB
       | **allow_None** : False
       | **tooltip** : The maximum size of the data buffer (for each display widget). Any data which is smaller than the buffer size will be stored in memory. Larger data will be read from disk in chunks.
   * - :py:data:`shared_buffer_size`
     - | **type** : float
       | **default** : 100
       | **name** : Shared buffer size limit
       | **choices** : None
       | **unit** : MB
       | **allow_None** : False
       | **tooltip** : A shared buffer is used to efficiently transport data between the main App and multiprocessing Processes. This buffer must be large enough to store at least one instance of all result data.
   * - :py:data:`shared_buffer_max_n`
     - | **type** : int
       | **default** : 20
       | **name** : Buffer dataframe limit
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The maximum number of datasets in the buffer. A dataset consists of all results for one frame. For performance reasons, the buffer should not be too large.
   * - :py:data:`max_image_size`
     - | **type** : float
       | **default** : 100
       | **name** : Maximum image size
       | **choices** : None
       | **unit** : Mpx
       | **allow_None** : False
       | **tooltip** : The maximum size (in megapixels) of images.
   * - :py:data:`use_detector_mask`
     - | **type** : bool
       | **default** : False
       | **name** : Use detector mask
       | **choices** : [True, False]
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : Flag to use a detector mask file and value. If False, no detector mask will be used.
   * - :py:data:`detector_mask_val`
     - | **type** : float
       | **default** : 0
       | **name** : Masked pixels display value
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The value to be used for the pixels masked on the detector. Note that this value will only be used for displaying the images. For pyFAI integration, the pixels will be fully masked and not be included.
   * - :py:data:`mosaic_border_width`
     - | **type** : int
       | **default** : 0
       | **name** : Mosaic tiling border width
       | **choices** : None
       | **unit** : px
       | **allow_None** : False
       | **tooltip** : The width of the border inserted between adjacent frames in the mosaic creation.
   * - :py:data:`mosaic_border_value`
     - | **type** : float
       | **default** : 0
       | **name** : Mosaic border value
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The value to be put in the border pixels in mosaics.
   * - :py:data:`run_type`
     - | **type** : str
       | **default** : Process in GUI
       | **name** : Run type
       | **choices** : ['Process in GUI', 'Command line']
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : Specify how the processing shall be performed.
   * - :py:data:`plugin_path`
     - | **type** : str
       | **default** : 
       | **name** : Custom plugin paths
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The paths to all custom plugin locations. Individual entries must be separated by a double semicolon `;;`.
   * - :py:data:`plot_update_time`
     - | **type** : float
       | **default** : 1.0
       | **name** : Plot update time
       | **choices** : None
       | **allow_None** : False
       | **unit** : s
       | **tooltip** : The delay before any plot updates will be processed. This will prevent multiple frequent update of plots.
   * - :py:data:`histogram_outlier_fraction_high`
     - | **type** : float
       | **default** : 0.07
       | **name** : Histogram outlier fraction (high)
       | **choices** : None
       | **allow_None** : False
       | **unit** : 
       | **tooltip** : The fraction of pixels with high values which will be ignored when cropping the histogram for 2d plots. A value of 0.07 will mask all sensor gaps in the Eiger detector.
   * - :py:data:`histogram_outlier_fraction_low`
     - | **type** : float
       | **default** : 0.02
       | **name** : Histogram outlier fraction (low)
       | **choices** : None
       | **allow_None** : False
       | **unit** : 
       | **tooltip** : The fraction of pixels with low values which will be ignored when cropping the histogram for 2d plots. 
   * - :py:data:`cmap_name`
     - | **type** : str
       | **default** : Gray
       | **name** : Default colormap
       | **choices** : None
       | **allow_None** : False
       | **unit** : 
       | **tooltip** : The default colormap used in pydidas plots.
   * - :py:data:`cmap_nan_color`
     - | **type** : str
       | **default** : #9AFEFF
       | **name** : Color for invalid data / no data
       | **choices** : None
       | **allow_None** : False
       | **unit** : 
       | **tooltip** : The RGB color used to fill missing or invalid data points. Invalid data points are labeled with np.NaN values.

Image ops
~~~~~~~~~

.. list-table::
   :widths: 20 80
   :header-rows: 1
   :class: tight-table

   * - Parameter
     - Description
   * - :py:data:`use_roi`
     - | **type** : int
       | **default** : 0
       | **name** : Use ROI
       | **choices** : [True, False]
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : Keyword to toggle use of the ROI for cropping the original images before processing them.
   * - :py:data:`roi_xlow`
     - | **type** : int
       | **default** : 0
       | **name** : ROI lower x limit
       | **choices** : None
       | **unit** : px
       | **allow_None** : False
       | **tooltip** : The lower boundary (in pixel) for cropping images in x, if use_roi is enabled. Negative values will be modulated with the image width.
   * - :py:data:`roi_xhigh`
     - | **type** : int
       | **default** : None
       | **name** : ROI upper x limit
       | **choices** : None
       | **unit** : px
       | **allow_None** : True
       | **tooltip** : The upper boundary (in pixel) for cropping images in x, if use_roi is enabled. Negative values will be modulated with the image width, i.e. -1 is equivalent with the full image size minus 1. To take the full image, use 'None' as value for the upper ROI limit.
   * - :py:data:`roi_ylow`
     - | **type** : int
       | **default** : 0
       | **name** : ROI lower y limit
       | **choices** : None
       | **unit** : px
       | **allow_None** : False
       | **tooltip** : The lower boundary (in pixel) for cropping images in y, if use_roi is enabled. Negative values will be modulated with the image width.
   * - :py:data:`roi_yhigh`
     - | **type** : int
       | **default** : None
       | **name** : ROI upper y limit
       | **choices** : None
       | **unit** : px
       | **allow_None** : True
       | **tooltip** : The upper boundary (in pixel) for cropping images in y, if use_roi is enabled. Negative values will be modulated with the image width, i.e. -1 is equivalent with the full image size minus 1. To take the full image, use 'None' as value for the upper ROI limit.
   * - :py:data:`use_thresholds`
     - | **type** : int
       | **default** : 0
       | **name** : Use thresholds
       | **choices** : [True, False]
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : Keyword to toggle use of the thresholds for clipping the data range in the original images before combining them.
   * - :py:data:`threshold_low`
     - | **type** : float
       | **default** : None
       | **name** : Lower threshold
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The lower threshold of the image. If any finite value (i.e. not np.nan or None) is used, the value of any pixels with a value below the threshold will be replaced by the threshold value. A value of np.nan or None will ignore the threshold.
   * - :py:data:`threshold_high`
     - | **type** : float
       | **default** : None
       | **name** : Upper threshold
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The upper threshold of the image. If any finite value (i.e. not np.nan or None) is used, the value of any pixels with a value below the threshold will be replaced by the threshold value. A value of np.nan or None will ignore the threshold.
   * - :py:data:`binning`
     - | **type** : int
       | **default** : 1
       | **name** : Binning factor
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The re-binning factor for the images in the composite. The binning will be applied to the cropped images.
   * - :py:data:`image_shape`
     - | **type** : tuple
       | **default** : (0, 0)
       | **name** : Image shape
       | **choices** : None
       | **unit** : px
       | **allow_None** : False
       | **tooltip** : The shape of an image.
   * - :py:data:`raw_image_shape`
     - | **type** : tuple
       | **default** : (0, 0)
       | **name** : Raw image shape
       | **choices** : None
       | **unit** : px
       | **allow_None** : False
       | **tooltip** : The image shape of the original image as loaded from the file.
   * - :py:data:`datatype`
     - | **type** : None
       | **default** : <class 'numpy.float32'>
       | **name** : Datatype
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The datatype.
   * - :py:data:`multiplicator`
     - | **type** : float
       | **default** : 1.0
       | **name** : Multiplication factor
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The multiplication scaling factor to be applied to the resulting Dataset.

Experiment
~~~~~~~~~~

.. list-table::
   :widths: 20 80
   :header-rows: 1
   :class: tight-table

   * - Parameter
     - Description
   * - :py:data:`xray_wavelength`
     - | **type** : float
       | **default** : 1
       | **name** : X-ray wavelength
       | **choices** : None
       | **unit** : A
       | **allow_None** : False
       | **tooltip** : The X-ray wavelength. Any changes to the wavelength will also update the X-ray energy setting.
   * - :py:data:`xray_energy`
     - | **type** : float
       | **default** : 12.398
       | **name** : X-ray energy
       | **choices** : None
       | **unit** : keV
       | **allow_None** : False
       | **tooltip** : The X-ray energy. Changing this parameter will also update the X-ray wavelength setting.
   * - :py:data:`detector_name`
     - | **type** : str
       | **default** : detector
       | **name** : Detector name
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The detector name in pyFAI nomenclature.
   * - :py:data:`detector_npixx`
     - | **type** : int
       | **default** : 0
       | **name** : Detector size X
       | **choices** : None
       | **unit** : px
       | **allow_None** : False
       | **tooltip** : The number of detector pixels in x direction (horizontal).
   * - :py:data:`detector_npixy`
     - | **type** : int
       | **default** : 0
       | **name** : Detector size Y
       | **choices** : None
       | **unit** : px
       | **allow_None** : False
       | **tooltip** : The number of detector pixels in x direction (vertical).
   * - :py:data:`detector_pxsizex`
     - | **type** : float
       | **default** : 100
       | **name** : Detector pixel size X
       | **choices** : None
       | **unit** : um
       | **allow_None** : False
       | **tooltip** : The detector pixel size in X-direction.
   * - :py:data:`detector_pxsizey`
     - | **type** : float
       | **default** : 100
       | **name** : Detector pixel size Y
       | **choices** : None
       | **unit** : um
       | **allow_None** : False
       | **tooltip** : The detector pixel size in Y-direction.
   * - :py:data:`detector_pxsize`
     - | **type** : float
       | **default** : 100
       | **name** : Detector pixel size
       | **choices** : None
       | **unit** : um
       | **allow_None** : False
       | **tooltip** : The detector pixel size in both X- and Y-direction.
   * - :py:data:`detector_dist`
     - | **type** : float
       | **default** : 1
       | **name** : Sample-detector distance
       | **choices** : None
       | **unit** : m
       | **allow_None** : False
       | **tooltip** : The sample-detector distance.
   * - :py:data:`detector_mask_file`
     - | **type** : Path
       | **default** : 
       | **name** : Detector mask file
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The path to the detector mask file.
   * - :py:data:`detector_poni1`
     - | **type** : float
       | **default** : 0
       | **name** : Detector PONI1
       | **choices** : None
       | **unit** : m
       | **allow_None** : False
       | **tooltip** : The detector PONI1 (point of normal incidence; in y direction). This is measured in meters from the detector origin.
   * - :py:data:`detector_poni2`
     - | **type** : float
       | **default** : 0
       | **name** : Detector PONI2
       | **choices** : None
       | **unit** : m
       | **allow_None** : False
       | **tooltip** : The detector PONI2 (point of normal incidence; in x direction). This is measured in meters from the detector origin.
   * - :py:data:`detector_rot1`
     - | **type** : float
       | **default** : 0
       | **name** : Detector Rot1
       | **choices** : None
       | **unit** : rad
       | **allow_None** : False
       | **tooltip** : The detector rotation 1 (lefthanded around the "up"-axis)
   * - :py:data:`detector_rot2`
     - | **type** : float
       | **default** : 0
       | **name** : Detector Rot2
       | **choices** : None
       | **unit** : rad
       | **allow_None** : False
       | **tooltip** : The detector rotation 2 (pitching the detector; positive direction is tilting the detector top upstream while keeping the bottom of the detector stationary.
   * - :py:data:`detector_rot3`
     - | **type** : float
       | **default** : 0
       | **name** : Detector Rot3
       | **choices** : None
       | **unit** : rad
       | **allow_None** : False
       | **tooltip** : The detector rotation 3 (around the beam axis; right-handed when looking downstream with the beam.)
   * - :py:data:`beamcenter_x`
     - | **type** : float
       | **default** : 0
       | **name** : Beamcenter x
       | **choices** : None
       | **unit** : px
       | **allow_None** : False
       | **tooltip** : The detector x-coordinate for the beamcenter.
   * - :py:data:`beamcenter_y`
     - | **type** : float
       | **default** : 0
       | **name** : Beamcenter y
       | **choices** : None
       | **unit** : px
       | **allow_None** : False
       | **tooltip** : The detector y-coordinate for the beamcenter.
   * - :py:data:`detector_tilt_angle`
     - | **type** : float
       | **default** : 0
       | **name** : detector tilt angle
       | **choices** : None
       | **unit** : deg
       | **allow_None** : False
       | **tooltip** : The detector tilt angle (relative to the beam normal).
   * - :py:data:`detector_tilt_plane`
     - | **type** : float
       | **default** : 0
       | **name** : detector tilt plane
       | **choices** : None
       | **unit** : deg
       | **allow_None** : False
       | **tooltip** : The detector tilt plane orientation (relative to positive x-axis).
   * - :py:data:`detector_dist_fit2d`
     - | **type** : float
       | **default** : 1
       | **name** : Sample-detector distance
       | **choices** : None
       | **unit** : mm
       | **allow_None** : False
       | **tooltip** : The sample-detector distance.

Pyfai
~~~~~

.. list-table::
   :widths: 20 80
   :header-rows: 1
   :class: tight-table

   * - Parameter
     - Description
   * - :py:data:`rad_npoint`
     - | **type** : int
       | **default** : 1000
       | **name** : Num points radial integration
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The number of bins in radial direction for the pyFAI integration.
   * - :py:data:`rad_unit`
     - | **type** : str
       | **default** : 2theta / deg
       | **name** : Radial unit
       | **choices** : ['Q / nm^-1', 'Q / A^-1', 'r / mm', '2theta / deg', '2theta / rad']
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The unit and type of the azimuthal profile.
   * - :py:data:`rad_use_range`
     - | **type** : str
       | **default** : Full detector
       | **name** : Radial range
       | **choices** : ['Full detector', 'Specify radial range']
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : Toggle to limit the radial integration range or use the full data range. If 'Specify radial range' is used, boundaries need to be defined in the lower and upper radial range Parameters.
   * - :py:data:`rad_range_lower`
     - | **type** : float
       | **default** : 0
       | **name** : Radial lower range
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The lower boundary of the radial integration range. This setting is only used if the 'Specify radial range' is set. This value needs to be given in the unit selected as radial unit.
   * - :py:data:`rad_range_upper`
     - | **type** : float
       | **default** : 0
       | **name** : Radial upper range
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The upper boundary of the radial integration range. This setting is only used if 'Specify radial range' is set. This value needs to be given in the unit selected as radial unit.
   * - :py:data:`azi_npoint`
     - | **type** : int
       | **default** : 1000
       | **name** : Num points azimuthal integration
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The number of bins in azimuthal direction for the pyFAI integration.
   * - :py:data:`azi_unit`
     - | **type** : str
       | **default** : chi / deg
       | **name** : Azimuthal unit
       | **choices** : ['chi / deg', 'chi / rad']
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The unit and type of the azimuthal profile.
   * - :py:data:`azi_use_range`
     - | **type** : str
       | **default** : Full detector
       | **name** : Azimuthal range
       | **choices** : ['Full detector', 'Specify azimuthal range']
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : Toggle to limit the azimuthal integration range or use the full data range. If 'Specify azimuthal range' is used, boundaries need to be defined in the lower and upper azimuthal range Parameters.
   * - :py:data:`azi_range_lower`
     - | **type** : float
       | **default** : 0
       | **name** : Azimuthal lower range
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The lower boundary of the azimuthal integration range. This setting is only used if 'Specify azimuthal range' is set. This value needs to be given in the unit selected as azimuthal unit.
   * - :py:data:`azi_range_upper`
     - | **type** : float
       | **default** : 0
       | **name** : Azimuthal upper range
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The upper boundary of the azimuthal integration range. This setting is only used if 'Specify azimuthal range' is set. This value needs to be given in the unit selected as azimuthal unit.
   * - :py:data:`azi_sector_width`
     - | **type** : float
       | **default** : 20
       | **name** : Azimuthal sector width
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The width of each azimuthal sector (in azimuthal units).
   * - :py:data:`azi_sector_centers`
     - | **type** : str
       | **default** : 0; 90; 180; 270
       | **name** : Azimuthal sector centers
       | **choices** : None
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The centers of the azimuthal sectors to be integrated (in azimuthal units). Separate multiple sectors by semicolons.
   * - :py:data:`int_method`
     - | **type** : str
       | **default** : CSR
       | **name** : PyFAI integration method
       | **choices** : ['CSR', 'CSR OpenCL', 'CSR full', 'CSR full OpenCL', 'LUT', 'LUT OpenCL', 'LUT full', 'LUT full OpenCL']
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The integration method. For a full reference, please visit the pyfai documentation available at: https://pyfai.readthedocs.io/
   * - :py:data:`integration_direction`
     - | **type** : str
       | **default** : Azimuthal integration
       | **name** : Integration direction
       | **choices** : ['Azimuthal integration', 'Radial integration', '2D integration']
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The integration direction.
   * - :py:data:`detector_model`
     - | **type** : str
       | **default** : Custom detector
       | **name** : Detector model
       | **choices** : ['Custom detector']
       | **unit** : 
       | **allow_None** : None
       | **tooltip** : The model name of the detector.
   * - :py:data:`polarization_factor`
     - | **type** : float
       | **default** : 0.99
       | **name** : Polarization factor
       | **choices** : None
       | **unit** : 
       | **allow_None** : True
       | **tooltip** : The Polarization factor. Must be a number between -1 (vertical) and +1 (horizontal). 0 corresponds to circular polarizazion, None corresponds to no correction.
   * - :py:data:`correct_solid_angle`
     - | **type** : bool
       | **default** : True
       | **name** : Correct solid angle
       | **choices** : [True, False]
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The correct solid angle Parameter in pyFAI (de)activates the correction for the solid angle of the detector pixels. Detector pixels further away from the beam axis see a smaller projected intensity. Using this parameter allows to correct for this effect, if set to True.

Proc
~~~~

.. list-table::
   :widths: 20 80
   :header-rows: 1
   :class: tight-table

   * - Parameter
     - Description
   * - :py:data:`d_spacing_unit`
     - | **type** : str
       | **default** : Angstrom
       | **name** : d-spacing unit
       | **choices** : ['Angstrom', 'nm']
       | **unit** : 
       | **allow_None** : False
       | **tooltip** : The output d-spacing unit. Å for Angstroms and nm for nanometers.
